name: Backend Pylint

on: [push]

jobs:
  lint-backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12", "3.13"]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        # 'cache: poetry' vẫn hữu ích ở đây. Nó sẽ thiết lập cấu hình cache của Poetry
        # (ví dụ: virtualenvs.in-project=true) và quản lý việc cache các gói phụ thuộc.
        cache: 'poetry'

    - name: Install Poetry explicitly
      shell: bash # Đảm bảo sử dụng bash cho các lệnh này
      run: |
        echo "Attempting to install Poetry..."
        # Cập nhật pip và cài đặt pipx vào thư mục user
        python -m pip install --user --upgrade pip
        python -m pip install --user pipx
        
        # Đảm bảo đường dẫn của pipx được thêm vào PATH (cho lệnh pipx tiếp theo)
        # Mặc dù pipx ensurepath cố gắng làm điều này, việc thêm vào GITHUB_PATH rõ ràng hơn cho CI
        # $HOME/.local/bin là nơi pipx thường cài đặt các ứng dụng
        export PATH="$HOME/.local/bin:$PATH"
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        
        # Cài đặt Poetry bằng pipx
        python -m pipx install poetry
        
        # Thêm một lần nữa để chắc chắn, vì pipx install có thể là lần đầu tiên tạo ra thư mục
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        echo "Poetry installation attempt finished."

    - name: Verify Poetry installation and PATH
      shell: bash
      run: |
        echo "Current PATH: $PATH"
        which poetry
        poetry --version

    - name: Install dependencies with Poetry
      working-directory: ./backend
      run: poetry install --no-interaction --no-ansi --sync

    - name: Run Pylint
      working-directory: ./backend
      run: poetry run pylint $(git ls-files '*.py')
