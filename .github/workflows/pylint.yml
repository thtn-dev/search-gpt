name: Backend Pylint

on: [push]

jobs:
  lint-backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12", "3.13"] # Hoặc các phiên bản bạn muốn
    defaults:
      run:
        shell: bash # Đảm bảo sử dụng bash cho các lệnh run
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        # Không sử dụng 'cache: poetry' ở đây nữa để tránh xung đột
        # chúng ta sẽ quản lý việc cài đặt và cache Poetry thủ công.

    - name: Install Poetry
      run: |
        echo "Starting explicit Poetry installation..."
        python -m pip install --user --upgrade pip
        python -m pip install --user pipx
        
        # Thêm thư mục bin của user vào PATH cho bước hiện tại và các bước sau
        # $HOME/.local/bin là nơi pipx thường cài đặt các ứng dụng
        USER_BIN_PATH="$HOME/.local/bin"
        export PATH="$USER_BIN_PATH:$PATH"
        echo "$USER_BIN_PATH" >> $GITHUB_PATH
        
        python -m pipx install poetry
        
        # Đảm bảo một lần nữa rằng đường dẫn chứa poetry (sau khi pipx install) nằm trong GITHUB_PATH
        # Điều này quan trọng nếu pipx install poetry là lần đầu tiên thư mục $HOME/.local/bin được tạo ra
        # hoặc nếu poetry được cài vào một sub-directory cụ thể bởi pipx (thường thì không)
        echo "$USER_BIN_PATH" >> $GITHUB_PATH 
        echo "Poetry installation attempt finished."

    - name: Verify Poetry installation and PATH
      run: |
        echo "Current PATH is: $PATH"
        echo "Checking for poetry executable..."
        which poetry
        poetry --version
        echo "Poetry verified."

    - name: Configure Poetry to create venv in project
      # Chạy lệnh này trong thư mục backend nếu file pyproject.toml của bạn ở đó
      # và bạn muốn file poetry.toml (chứa config local) được tạo/cập nhật ở đó.
      working-directory: ./backend 
      run: |
        poetry config virtualenvs.in-project true --local

    - name: Cache Poetry virtual environment
      uses: actions/cache@v4
      id: poetry-cache # Đặt ID để có thể kiểm tra cache hit status nếu cần
      with:
        # Đường dẫn đến thư mục virtualenv của Poetry.
        # Với 'virtualenvs.in-project true', nó sẽ là .venv trong thư mục dự án.
        path: ./backend/.venv 
        key: ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-${{ matrix.python-version }}-

    - name: Install dependencies with Poetry
      working-directory: ./backend
      run: |
        # Nếu cache được phục hồi thành công, lệnh install này sẽ nhanh hơn nhiều
        # hoặc không cần làm gì nếu .venv đã đầy đủ.
        poetry install --no-interaction --no-ansi --sync
        echo "Dependencies installed."

    - name: Run Pylint
      working-directory: ./backend
      run: |
        poetry run pylint $(git ls-files '*.py')
